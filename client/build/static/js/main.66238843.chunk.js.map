{"version":3,"sources":["util/userService.js","js/header.js","js/login.js","js/home.js","util/authHeader.js","util/orderService.js","js/orders.js","js/viewOrder.js","js/errorPage.js","js/main.js","js/errorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["userService","login","username","password","requestOptions","method","headers","Content-Type","body","JSON","stringify","console","log","fetch","then","handleResponse","user","token","localStorage","setItem","logout","removeItem","this","props","history","push","response","text","data","parse","ok","status","error","message","statusText","Promise","reject","handleClick","e","Header","react_default","a","createElement","className","href","Navbar","Brand","Toggle","Collapse","Text","Link","pullRight","onClick","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","preventDefault","state","success","alert","stop","_x","apply","arguments","handleChangeUsername","bind","assertThisInitialized","handleChangePassword","event","setState","target","value","Jumbotron","onSubmit","FormGroup","controlId","ControlLabel","FormControl","type","placeholder","onChange","Button","React","Component","Home","getItem","authHeader","Authorization","orderService","save_order","order","res","json","result","view_order","oid","Orders","viewOrder","showItem","itemId","saveOrder","id","ordersTemp","key","edited","_this2","orders","isLoaded","_this3","val","Table","striped","bordered","condensed","hover","map","item","customer","bsStyle","Redirect","to","pathname","changeSubTotal","items","parseInt","updateTotal","newItems","forEach","element","newOrder","selectItemChange","itemNo","selectedItemNo","selectedItem","itemList","index","length","isNaN","addItem","newItem","tot","total","itemOptions","location","itemOpts","defaultValue","data-value","price","min","name","Row","Col","md","mdOffset","withRouter","errorPage","Main","Switch","Route","exact","path","component","ErrorBoundary","hasError","info","children","App","errorBoundry","header","main","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66238843.chunk.js","sourcesContent":["\n\nexport const userService = {\n    login,\n    logout\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    console.log(requestOptions);\n    return fetch(`/api/login`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // login successful if there's a jwt token in the response\n            if (user.token) {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n    this.props.history.push('/login')\n\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { userService } from '../util/userService';\n\nfunction handleClick(e) {\n    userService.logout()\n};\nconst Header = () => (\n\n    <header>\n        <div className=\"text-center\">\n            <h1>\n                <a href=\"/\">Point of Sale System</a>\n            </h1>\n        </div>\n        {/* Component taken from React Bootstrap */}\n        <Navbar>\n            <Navbar.Header>\n                <Navbar.Brand>\n                    <a href=\"/\">POS</a>\n                </Navbar.Brand>\n                <Navbar.Toggle />\n            </Navbar.Header>\n            <Navbar.Collapse>\n                <Navbar.Text>\n                    <Navbar.Link href=\"/orders\">Orders</Navbar.Link>\n                </Navbar.Text>\n                <Navbar.Text pullRight>\n                    <Navbar.Link href=\"\" onClick={handleClick}>Logout</Navbar.Link>\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    </header>\n)\n\nexport default Header\n","import React from 'react'\nimport { Button } from 'react-bootstrap';\nimport { FormGroup } from 'react-bootstrap';\nimport { ControlLabel } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport { Jumbotron } from 'react-bootstrap';\nimport { userService } from '../util/userService';\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { username: '', password: '' };\n\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\n        this.handleChangePassword = this.handleChangePassword.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChangeUsername(event) {\n        this.setState({ username: event.target.value });\n    }\n\n    handleChangePassword(event) {\n        this.setState({ password: event.target.value });\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault();\n        userService.login(this.state.username, this.state.password).then((data) => {\n            if (data.success === true) {\n                this.props.history.push('/orders')\n            } else {\n                alert(\"login fail. Please try again.\");\n                this.props.history.push('/login')\n            }\n        });\n\n    };\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-between\">\n                <div className=\"col-md-4 col-lg-offset-4\"  >\n                <Jumbotron>\n                    <form onSubmit={this.handleSubmit}>\n                        <FormGroup\n                            controlId=\"usernameText\"\n                        >\n                            <ControlLabel>Username</ControlLabel>\n                            <FormControl\n                                type=\"text\"\n                                value={this.state.username}\n                                placeholder=\"Enter Username\"\n                                onChange={this.handleChangeUsername}\n                            />\n\n                        </FormGroup>\n                        <FormGroup\n                            controlId=\"passwordText\"\n                        >\n                            <ControlLabel>Password</ControlLabel>\n                            <FormControl\n                                type=\"password\"\n                                value={this.state.password}\n                                placeholder=\"Enter Password\"\n                                onChange={this.handleChangePassword}\n                            />\n\n                        </FormGroup>\n                        <Button type=\"submit\" className='btn-success'>Login</Button>\n                    </form>\n                    </Jumbotron>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Login","import React from 'react'\n\nclass Home extends React.Component {\n\n    render() {\n\n        let user = JSON.parse(localStorage.getItem('user'));\n\n        if (user && user.token) {\n            console.log('Authentication successful');\n        } else {\n            this.props.history.push('/login')\n        }\n\n        return (\n\n            <div>\n                <h1>Home</h1>\n            </div>\n        );\n    }\n}\n\nexport default Home\n","export function authHeader() {\n    // return authorization header with jwt token\n    let user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.token) {\n        return {\n            'Authorization': 'Bearer ' + user.token,\n            'Content-Type': 'application/json'\n        };\n    } else {\n        return {};\n    }\n}\n\nexport default authHeader\n","import authHeader from \"./authHeader\";\n\n\n\nexport const orderService = {\n    save_order, view_order\n};\n\n\nfunction save_order(order) {\n    const requestOptions = {\n        method: 'POST',\n        headers: authHeader(),\n        body: JSON.stringify({ order: order })\n    };\n    fetch(\"/api/save_order\", requestOptions)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                console.log('save', result);\n                return {\n\n                    result: result\n                };\n            },\n            (error) => {\n                console.log('save', error);\n                return error\n            }\n        )\n}\n\nfunction view_order(oid) {\n    const requestOptions = {\n        method: 'POST',\n        headers: authHeader(),\n        body: JSON.stringify({ oid: oid })\n    };\n    fetch(\"/api/view_order\", requestOptions)\n        .then(res => res.json())\n        .then(\n            (error) => {\n                return error\n            },\n            (result) => {\n                return result\n            }\n        )\n}","import React from 'react'\nimport { Table } from 'react-bootstrap';\nimport { authHeader } from '../util/authHeader'\nimport { Redirect } from 'react-router-dom'\nimport { Button } from 'react-bootstrap';\nimport { orderService } from '../util/orderService';\n\n\n\nclass Orders extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            data: [],\n            showItem: false,\n\n        }\n\n    }\n    componentDidMount() {\n        const requestOptions = {\n            method: 'GET',\n            headers: authHeader()\n        };\n        fetch(\"/api/view_orders\", requestOptions)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        data: result.orders\n                    });\n                },\n\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    viewOrder = (oid) => {\n        this.setState({ showItem: true, itemId: oid });\n\n    }\n    saveOrder = (order) => {\n        orderService.save_order(order);\n    }\n    removeItem = (id) => {\n        let ordersTemp = [];\n        for (let key in this.state.data) {\n            let order = this.state.data[key];\n            if (order['id'] !== id) {\n                ordersTemp.push(order);\n            } else {\n                let edited = order;\n                edited['state'] = \"closed\";\n                this.saveOrder(edited);\n            }\n        }\n        this.setState({\n            data: ordersTemp\n        });\n    }\n    render() {\n        let user = JSON.parse(localStorage.getItem('user'));\n        if (user && user.token) {\n            console.log('Authentication successful');\n        } else {\n            this.props.history.push('/login')\n        }\n        var val = 0;\n        return (\n            <div>\n                <h2>Order List</h2>\n                <Table striped bordered condensed hover>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Order ID</th>\n                            <th>Customer Name</th>\n                            <th>Edit</th>\n                            <th>Complete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n\n                            this.state.data.map((item, key) => {\n                                val = val + 1\n                                return (\n                                    <tr key={key}>\n                                        <td>{val}</td>\n                                        <td>{item.id}</td>\n                                        <td>{item.customer}</td>\n                                        <td><Button bsStyle=\"success\" type=\"submit\" onClick={() => { this.viewOrder(item.id) }}>Edit</Button>\n                                            {this.state.showItem ? <Redirect to={{\n                                                pathname: '/order',\n                                                state: { oid: this.state.itemId }\n                                            }}\n                                            /> : null}\n                                        </td>\n                                        <td><Button bsStyle=\"danger\" onClick={() => { this.removeItem(item.id) }}>Pay</Button></td>\n                                    </tr>\n                                )\n                            })\n                        }\n\n                    </tbody>\n                </Table>\n                <Button bsStyle=\"primary\" onClick={() => { this.props.history.push({ pathname: '/order', state: { oid: 'new' } }) }}>Add New Order</Button>\n            </div>\n        );\n    }\n}\n\nexport default Orders\n","import React from 'react'\nimport { Table } from 'react-bootstrap';\nimport { authHeader } from '../util/authHeader';\nimport { Button } from 'react-bootstrap';\nimport { FormGroup } from 'react-bootstrap';\nimport { ControlLabel } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { withRouter } from \"react-router\";\nimport { orderService } from \"../util/orderService\";\n\n\nclass viewOrder extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            order: [],\n            items: [],\n            itemList: [],\n            itemOptions: [],\n            total: 0\n        }\n        this.updateTotal = this.updateTotal.bind(this);\n\n    }\n    componentDidMount() {\n        if (this.props.location.state.oid !== 'new') {\n            const requestOptions = {\n                method: 'POST',\n                headers: authHeader(),\n                body: JSON.stringify({\n                    oid: this.props.location.state.oid,\n                }),\n            }\n            fetch(\"/api/view_order\", requestOptions)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        this.setState({\n                            order: result.order,\n                            items: result.items,\n                            itemList: result.itemList\n                        });\n                        let itemOpts = [];\n                        itemOpts.push(<option > Select a Item </option>);\n                        result.itemList.forEach(element => {\n                            itemOpts.push(<option key={element['id']} value={element['id']}> {element['name']} </option>);\n                        });\n                        this.setState({\n                            itemOptions: itemOpts\n                        });\n                        this.updateTotal();\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isLoaded: true,\n                            error\n                        });\n                    }\n                )\n\n        } else {\n            const requestOptions = {\n                method: 'GET',\n                headers: authHeader()\n            }\n            fetch(\"/api/get_items\", requestOptions)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        this.setState({\n                            itemList: result.items\n                        });\n                        let itemOpts = [];\n                        itemOpts.push(<option > Select a Item </option>);\n                        result.items.forEach(element => {\n                            itemOpts.push(<option key={element['id']} value={element['id']}> {element['name']} </option>);\n                        });\n                        this.setState({\n                            itemOptions: itemOpts,\n                            order: {\n                                id: '',\n                                customer: '',\n                                state: 'open',\n                                items: {}\n                            }\n                        });\n\n                        this.updateTotal();\n                        this.addItem();\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isLoaded: true,\n                            error\n                        });\n                    }\n                )\n\n        }\n\n    }\n\n    saveOrder = () => {\n        var data = orderService.save_order(this.state.order);\n        console.log(\"order saved\", data);\n    }\n    changeSubTotal = (e, id) => {\n        console.log('e value', e.target.value);\n        let order = this.state.order;\n        order.items[id] = parseInt(e.target.value);\n        this.setState({ order: order });\n        this.updateTotal();\n        this.saveOrder();\n    }\n\n    removeItem = (oid) => {\n        let newItems = [];\n        this.state.items.forEach(element => {\n            if (element['id'] !== oid) {\n                newItems.push(element);\n            }\n        });\n        let newOrder = this.state.order;\n        for (var key in newOrder.items) {\n            if (parseInt(key) === oid) {\n                delete newOrder.items[key];\n            }\n        }\n        this.setState({\n            items: newItems,\n            order: newOrder\n        });\n        this.updateTotal();\n        this.saveOrder();\n\n    }\n\n    selectItemChange = (e, itemNo) => {\n        let selectedItemNo = e.target.value;\n        let selectedItem = '';\n        this.state.itemList.forEach(element => {\n            if (parseInt(selectedItemNo) === element['id']) {\n                selectedItem = element;\n                console.log(\"hooray\");\n            }\n        });\n        let items = this.state.items;\n        for (let index = 0; index < items.length; index++) {\n            const element = items[index];\n            if (isNaN(parseInt(selectedItemNo))) {\n                return\n            }\n            console.log(itemNo, element['id'])\n            if (selectedItem['id'] === element['id']) {\n                alert(\"This item is already added\");\n                return\n            }\n\n            if (index + 1 === itemNo) {\n                items[index] = selectedItem;\n            }\n        }\n        this.setState({\n            items: items\n        });\n        this.updateTotal();\n        this.saveOrder();\n\n    }\n    addItem = () => {\n        let newItem = {};\n        let items = this.state.items;\n        newItem['id'] = '';\n        newItem['name'] = '';\n        newItem['price'] = 0;\n        newItem['qty'] = 1;\n        items.push(newItem);\n        this.setState({\n            items: items\n        });\n\n    }\n\n    updateTotal = () => {\n        let tot = 0;\n        this.state.items.forEach(element => {\n            if (isNaN(this.state.order.items[element['id']]) || isNaN(element['price'])) {\n                return;\n            }\n            tot = tot + (this.state.order.items[element['id']] * element['price']);\n        });\n        this.setState({\n            total: tot\n        });\n\n    }\n    render() {\n\n        let user = JSON.parse(localStorage.getItem('user'));\n        if (user && user.token) {\n            console.log('Authentication successful');\n        } else {\n            this.props.history.push('/login')\n        }\n\n\n        var val = 0;\n        console.log(this.state.items);\n        return (\n            <div className='col-md-6 col-lg-offset-3'>\n                <h2>Order Details</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <div className='col-lg-6 col-lg-offset-3'>\n                        <FormGroup\n                        >\n                            <label >Order ID : </label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                id=\"id_input\"\n                                value={this.state.order.id}\n                                placeholder=\"Enter orderID\"\n                                onChange={(e) => {\n                                    let val = e.target.value;\n                                    let order = this.state.order;\n                                    order['id'] = val;\n                                    this.setState({\n                                        order: order,\n                                    });\n\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup\n                        >\n                            <ControlLabel>Customer Name</ControlLabel>\n                            <input\n                                type=\"text\"\n                                id=\"name_input\"\n                                className=\"form-control\"\n                                defaultValue={this.state.order.customer}\n                                placeholder=\"Enter customer\"\n                                onChange={(e) => {\n                                    let val = e.target.value;\n                                    let order = this.state.order;\n                                    order['customer'] = val;\n                                    this.setState({\n                                        order: order,\n                                    });\n                                }}\n                            />\n\n                        </FormGroup>\n\n                    </div>\n                    <Table striped bordered condensed hover onChange={e => this.updateTotal(e)}>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Item ID</th>\n                                <th>Item Name</th>\n                                <th>Price</th>\n                                <th data-value=\"test2\">Qty</th>\n                                <th>Sub total</th>\n                                <th>Remove</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n\n                                this.state.items.map((item, key) => {\n                                    val = val + 1\n                                    console.log(item);\n                                    if (item.id === '') {\n                                        return (\n                                            <tr key={key}>\n                                                <td>{val}</td>\n                                                <td>{item.id}</td>\n                                                <td><select className=\"form-control\" onChange={e => this.selectItemChange(e, val)} id={val}>{this.state.itemOptions}</select></td>\n                                                <td>{item.price}</td>\n                                                <td className='col-md-2'>\n                                                    <input\n                                                        min=\"0\"\n                                                        id={item.name}\n                                                        type=\"number\"\n                                                        className=\"form-control\"\n                                                        value={this.state.order.items[item.id]}\n                                                        placeholder=\"Enter qty\"\n                                                        onChange={e => this.changeSubTotal(e, item.id)}\n                                                    />\n\n                                                </td>\n                                                {/* <td>{item.price * this.state.order.items[item.id]}</td> */}\n                                                {\n                                                    isNaN(item.price * this.state.order.items[item.id]) ? (\n                                                        <td>{0}</td>\n                                                    ) : (\n                                                            <td>{item.price * this.state.order.items[item.id]}</td>\n                                                        )\n                                                }\n                                                <td><Button bsStyle=\"danger\" onClick={() => { this.removeItem(item.id) }}>X</Button></td>\n                                            </tr>\n                                        )\n                                    } else {\n                                        return (\n                                            <tr key={key}>\n                                                <td>{val}</td>\n                                                <td>{item.id}</td>\n                                                <td>{item.name}</td>\n                                                <td>{item.price}</td>\n                                                <td className='col-md-2'>\n                                                    <input\n                                                        min=\"0\"\n                                                        id={item.name}\n                                                        type=\"number\"\n                                                        className=\"form-control\"\n                                                        value={this.state.order.items[item.id]}\n                                                        // value = { isNaN(this.state.order.items[item.id]) ? ( console.log(\"working lol\")) : (console.log(\"working lolol\"))}\n                                                        placeholder=\"Enter qty\"\n                                                        onChange={e => this.changeSubTotal(e, item.id)}\n                                                    />\n\n                                                </td>\n                                                {\n                                                    isNaN(item.price * this.state.order.items[item.id]) ? (\n                                                        <td>{0}</td>\n                                                    ) : (\n                                                            <td>{item.price * this.state.order.items[item.id]}</td>\n                                                        )\n                                                }\n                                                <td><Button bsStyle=\"danger\" onClick={() => { this.removeItem(item.id) }}>X</Button></td>\n                                            </tr>\n                                        )\n\n                                    }\n\n                                })\n                            }\n\n                        </tbody>\n                    </Table>\n\n\n\n\n\n                    <br></br>\n                    <Row className=\"show-grid\">\n                        <Col md={2}  >\n                            <Button className=\"btn-success\" onClick={() => { this.addItem() }}>Add Item</Button>\n\n                        </Col>\n                        <Col md={2} mdOffset={4}  >\n                            <ControlLabel>Total  :   </ControlLabel>{' '}\n\n                        </Col>\n                        <Col md={2}><FormControl type=\"number\" value={this.state.total} ></FormControl></Col>\n\n                        <Col md={2}  >\n                            <Button className=\"btn-success\" onClick={() => { this.saveOrder() }}>Save Order</Button>\n\n                        </Col>\n\n\n\n                    </Row>\n\n\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(viewOrder)\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nconst errorPage = () => {\n    return (\n        <Jumbotron>\n            <h1>Oops</h1>\n            <p>\n                We couldn't find what you are looking for.\n            </p>\n\n        </Jumbotron>\n\n    )\n\n}\n\nexport default errorPage","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Login from './login';\nimport Home from './home';\nimport Orders from './orders';\nimport viewOrder from './viewOrder';\nimport errorPage from './errorPage';\n\n// main routes for react app\nconst Main = () => (\n  <main>\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route path='/login' component={Login}/>\n      <Route path='/orders' component={Orders}/>\n      <Route path='/order' component={viewOrder}/>\n      <Route component={errorPage}/>\n    </Switch>\n  </main>\n)\n\nexport default Main\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({\n      hasError: true,\n      error: error\n    });\n  \n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Jumbotron>\n          <h1>Oops</h1>\n          <h3> Something went wrong. :(</h3>\n          <p>\n            {this.state.error}\n          </p>\n\n        </Jumbotron>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./js/header\";\nimport Main from \"./js/main\";\nimport ErrorBoundary from './js/errorBoundry';\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      items: [],\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ErrorBoundary>\n          <Header />\n          <Main />\n        </ErrorBoundary >\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}